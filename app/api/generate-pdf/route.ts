/**
 * API para Gera√ß√£o de PDFs - Endpoint Unificado
 * 
 * Este arquivo centraliza toda a gera√ß√£o de PDFs da aplica√ß√£o.
 * Suporta diferentes tipos de relat√≥rios com templates espec√≠ficos.
 * 
 * Tipos suportados:
 * - mutirao: Relat√≥rios de mutir√£o (individual ou consolidado)
 * - registro: Registros fotogr√°ficos (acumulador, desfazimento, etc.)
 * - evidencias: Evid√™ncias fotogr√°ficas
 * - unified: Relat√≥rios unificados (revitaliza√ß√£o, etc.)
 */

import { NextRequest, NextResponse } from 'next/server';
import puppeteer from 'puppeteer-core';

// Importa√ß√µes dos geradores de PDF espec√≠ficos
import { exportMutiraoPdf, exportRegistroPdf } from '@/lib/pdf/mutirao-modern';
import { exportEvidenciasPdf, exportEventosPdf } from '@/lib/pdf/evidencias-modern';
import { exportUnifiedPdf } from '@/lib/pdf/relatorios-modern';
import { generateMonumentosHTML } from '@/lib/pdf/monumentos-modern';
import { exportEvidenciasRotineirosPdf } from '@/lib/pdf/rotineiros-modern';

// Importa√ß√µes para gera√ß√£o de nomes de arquivos
import { generateFileName, generateConsolidatedFileName } from '@/lib/filename-generator';

// Configura√ß√£o centralizada do Puppeteer
import { generatePDFFromHTML } from '@/lib/puppeteer-config';

// Tipos TypeScript
import type { MutiraoRelatorio, RegistroRelatorio, ReportSummary, Relatorio, MonumentosRelatorio, RotineirosRelatorio } from '@/lib/types';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { tipo, dados, consolidated } = body;

    console.log('üìä PDF Request:', { tipo, dados: dados?.tipoServico, consolidated });

    // Valida√ß√£o b√°sica
    if (!tipo || !dados) {
      console.error('‚ùå Valida√ß√£o falhou:', { tipo, dados: !!dados });
      return NextResponse.json({ error: 'Tipo e dados s√£o obrigat√≥rios' }, { status: 400 });
    }

    let pdfBuffer: Buffer | Uint8Array;
    let fileName: string;

    // ========================================
    // ROTEAMENTO POR TIPO DE RELAT√ìRIO
    // ========================================

    switch (tipo) {
      case 'mutirao':
        console.log('üîÑ Processando mutir√£o...');
        // Relat√≥rio de mutir√£o (SELIMP)
        pdfBuffer = await exportMutiraoPdf(dados as MutiraoRelatorio);
        fileName = consolidated 
          ? generateConsolidatedFileName(dados.data) // Data filtrada para consolidado
          : generateFileName(dados as MutiraoRelatorio);
        break;

      case 'registro':
        console.log('üîÑ Processando registro...');
        // Registros fotogr√°ficos (Acumulador, Desfazimento, etc.)
        pdfBuffer = await exportRegistroPdf(dados as RegistroRelatorio);
        fileName = generateFileName(dados as RegistroRelatorio);
        break;

      case 'evidencias':
        console.log('üîÑ Processando evid√™ncias...', dados.tipoServico);
        // Evid√™ncias fotogr√°ficas gerais
        pdfBuffer = await exportEvidenciasPdf(dados as Relatorio);
        fileName = generateFileName(dados as Relatorio);
        break;

      case 'eventos':
        console.log('üîÑ Processando eventos...', dados.tipoServico);
        // Relat√≥rios de eventos com legendas especiais
        pdfBuffer = await exportEventosPdf(dados as Relatorio);
        fileName = generateFileName(dados as Relatorio);
        break;

      case 'unified':
        console.log('üîÑ Processando unificado...');
        // Relat√≥rios unificados (Revitaliza√ß√£o, etc.)
        pdfBuffer = await exportUnifiedPdf(dados as Relatorio);
        fileName = generateFileName(dados as Relatorio);
        break;

      case 'monumentos':
        console.log('üîÑ Processando monumentos...');
        // Relat√≥rios de Monumentos
        const html = generateMonumentosHTML(dados as MonumentosRelatorio);
        pdfBuffer = await generatePDFFromHTML(html);
        fileName = generateFileName(dados as MonumentosRelatorio);
        break;

      case 'rotineiros':
        console.log('üîÑ Processando servi√ßos rotineiros...');
        console.log('üìä Dados recebidos:', JSON.stringify(dados, null, 2));
        // Relat√≥rios de Servi√ßos Rotineiros (individual)
        const dataFormatada = new Date(dados.data).toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
        console.log('üìÖ Data formatada:', dataFormatada);
        console.log('üìã Array de rotineiros:', [dados as RotineirosRelatorio]);
        pdfBuffer = await exportEvidenciasRotineirosPdf(
          dataFormatada,
          [dados as RotineirosRelatorio]
        );
        fileName = generateFileName(dados as RotineirosRelatorio);
        console.log('üìÑ Nome do arquivo:', fileName);
        break;

      default:
        console.error('‚ùå Tipo inv√°lido:', tipo);
        return NextResponse.json({ error: 'Tipo de relat√≥rio inv√°lido' }, { status: 400 });
    }

    // ========================================
    // RESPOSTA COM PDF GERADO
    // ========================================

    return new NextResponse(new Uint8Array(pdfBuffer), {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        // Usa UTF-8 encoding para suportar caracteres especiais nos nomes
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}.pdf`,
      },
    });

  } catch (error) {
    console.error('‚ùå Erro ao gerar PDF:', error);
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json(
      { error: 'Erro interno do servidor ao gerar PDF', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}
